"NeoBundle Scripts-----------------------------
if has('vim_starting')
  if &compatible
    set nocompatible               " Be iMproved
  endif

  " Required:
  set runtimepath+=/data/pg1709/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('/data/pg1709/.vim/bundle'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'flazz/vim-colorschemes'
" Add or remove your Bundles here:
NeoBundle 'majutsushi/tagbar'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'Shougo/vimshell', { 'rev' : '3787e5' }
NeoBundle 'SirVer/ultisnips'
NeoBundle 'Valloric/YouCompleteMe'
NeoBundle 'bling/vim-airline'
NeoBundle 'bronson/vim-trailing-whitespace'
NeoBundle 'ctrlpvim/ctrlp.vim'
NeoBundle 'honza/vim-snippets'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-speeddating'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'tpope/vim-sensible'
NeoBundle 'jceb/vim-orgmode'
NeoBundle 'rdnetto/YCM-Generator'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'wting/rust.vim'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'rking/ag.vim'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'mattn/calendar-vim'
NeoBundle 'utl.vim'
NeoBundle 'LaTeX-Box-Team/LaTeX-Box'
" Required:
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
"End NeoBundle Scripts-------------------------

" --- Custom Configuration
let g:DropboxPath="/data/Dropbox"

" --- Plugin Configuration
let g:VimCitBibPath="~/workspaces/textito/"
let g:VimCitPdfPath=g:DropboxPath . "/refdb/papers"
let g:VimCitPdfViewer="evince"
let g:VimCitNotesPath=g:DropboxPath . "/refdb/notes"
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsListSnippets="<c-l>"
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsUsePythonVersion = 2
let g:ycm_key_list_previous_completion=['<Up>']
let g:airline_powerline_fonts = 0
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:org_agenda_files=[g:DropboxPath . '/gtd/*.org', g:DropboxPath . '/gtd/projects/*.org']
let g:ctrlp_extensions = ['tag']
let g:LatexBox_Folding = 1
let g:LatexBox_latexmk_preview_continuously = 1
let g:LatexBox_quickfix = 2
let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'

set wildignore=*/.git/*,*/.hg/*,*/.svn/*,*/build/*,*.o,*.class

" --- Customised Behaviour
au BufRead,BufNewFile *.maxj setfiletype java
au BufRead,BufNewFile *.md setlocal spell spelllang=en_gb

autocmd BufWritePre * :FixWhitespace
autocmd BufNewFile,BufRead *.md setlocal omnifunc=VimCitComplete
autocmd BufNewFile,BufRead *.md setlocal filetype=markdown

command! Gtd e /data/Dropbox/gtd/gtd.org

" -- UI
set expandtab
set tabstop=2
set shiftwidth=2
set smarttab
set t_Co=256
set incsearch
set smartcase
set showcmd
set cursorline
set nobackup
set nowritebackup
set noswapfile
set relativenumber
set cursorline
set shell=bash

syntax on
colorscheme Tomorrow

" -- Key bindings
" ---- Code search
nnoremap <F2> :CtrlPTag<CR>
nnoremap gr :grep -I <cword> * --exclude-dir="build" -r<CR>:cw<CR>

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

no <down> <Nop>
no <left> <Nop>
no <right> <Nop>
no <up> <Nop>
ino <down> <Nop>
ino <left> <Nop>
ino <right> <Nop>
ino <up> <Nop>

nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>:q<cr>
nnoremap <F5> :make <up><cr>
nnoremap <F4> :source %<cr>
nnoremap qq :%s/\<<C-r><C-w>\>//gc<Left><Left><Left>
nnoremap H ^
nnoremap L $
inoremap jk <esc>
inoremap jj <esc>:w<cr>
inoremap <esc> <nop>

" nnoremap <F6> ?@<cr>/,<cr>h:VimCitPdf<cr>
nnoremap <F6> :!make <up><cr>
nnoremap <F7> ?@<cr>/,<cr>h:VimCitNotes<cr>
nnoremap <F8> :VimCitSearch<cr>
