# --- Configs ---
# append history on session close
shopt -s histappend
# save multi line commands as one command
shopt -s cmdhist

HISTFILESIZE=1000000
HISTSIZE=1000000

# ignore commands that start with a space and duplicates
HISTCONTROL=ignoreboth

# ignore the following commands from history
HISTIGNORE='ls:bg:fg:history'

# Store each history line as it is issued to prevent lost history in case of a
# crashed session
PROMPT_COMMAND='history -a'

# Prompt
BGREEN='\[\033[1;32m\]'
GREEN='\[\033[0;32m\]'
BRED='\[\033[1;31m\]'
RED='\[\033[0;31m\]'
BBLUE='\[\033[1;34m\]'
BLUE='\[\033[0;34m\]'
NORMAL='\[\033[00m\]'
PS1="${BLUE}(${RED}\w${BLUE}) ${NORMAL}\u@\h \n ${RED}\$ ${NORMAL}"

# --- Paths ---
if [ -x /opt/gcc-4.9.2 ]
then
  export CXX=/opt/gcc-4.9.2/bin/g++
  export CC=/opt/gcc-4.9.2/bin/gcc
  export PATH=/opt/gcc-4.9.2/bin:${PATH}
  export LD_LIBRARY_PATH=/opt/gcc-4.9.2/lib64:${LD_LIBRARY_PATH}
fi

if [ -e /opt/Xilinx/Vivado/2015.4/ ]
then
  export VIVADO_HOME=/opt/Xilinx/Vivado/2015.4/
fi

if [ -e /usr/lib/jvm/jdk1.8.0_01 ]
then
  export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_91
fi

if [ -e /usr/share/ant/bin ]
then
  export ANT_ROOT=/usr/share/ant/bin
  export PATH=$ANT_ROOT:$PATH
fi

if [ -e ~/dotfiles/scripts/ ]
then
  export PATH=$PATH:~/dotfiles/scripts
fi

# --- Aliases ---
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias rm='rm -i'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias ack='ack-grep'

alias meminfo='free -m -l -t'
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'
alias cpuinfo='lscpu'
alias gpumeminfo='grep -i --color memory /var/log/Xorg.0.log'

# --- Useful Functions ---
function projector-clone() {
    vga=`xrandr -q | grep -o VGA.`
    lvds=`xrandr -q | grep -o LVDS.`
    res="1024x768"
    echo "Setting projector -> $vga, local -> $lvds, res = 1024 x 768"
    xrandr --output $vga --mode $res --same-as $lvds --output $lvds --mode $res
}

function projector-off() {
    vga=`xrandr -q | grep -o VGA.`
    lvds=`xrandr -q | grep -o LVDS.`
    echo "Closing projector -> $vga, local -> $lvds"
    xrandr --output $vga --off
    xrandr --output $lvds --auto
}

function display-dual-left-of() {
    xrandr --auto --output $1 --left-of $2
}

# display disk usage in human readable format, largest file first
function mydu() {
    echo "Checking disk usage. This may take a while..."
    du --max-depth 1 -h -a | sort -h
}

function __countFiles() {
    while read -r dir; do files=`find "$dir" | wc -l`; echo "$files $dir"; done
}

# display file usage by directory in human readable format, largest file first
function myfu() {
    echo "Checking file usage. This may take a while..."
    find -maxdepth 1 -type d | __countFiles | sort -h -r
}

# create a new, empty pandoc project
function pandoc-init() {
    if [[ "$#" -ne 1 ]]; then
	echo "Usage: pandoc-init <Project Name>"
	return
    fi
    pathToFile=`readlink ~/.bash_include`
    cp `dirname $pathToFile`"/../templates/pandoc" $1 -r
}

function max-show() {
  echo "Current settings: "
  echo "    MAXCOMPILERDIR --> ${MAXCOMPILERDIR}"
  echo "    MAXELEROSDIR   --> ${MAXELEROSDIR}"
  echo "Available maxcompiler versions"
  ls /vol/cc/opt/maxeler | grep maxcompiler | sed 's/maxcompiler-//g'
}

function max-set() {
  mcdir=/vol/cc/opt/maxeler/maxcompiler-$1
  if [ -x ${mcdir} ]; then
    pathToXilinx=/vol/cc/opt/Xilinx/13.3/ISE_DS
    source ${pathToXilinx}/settings64.sh ${pathToXilinx}
    export PATH=${PATH}:/vol/cc/opt/altera/13.1/quartus/bin
    export MAXCOMPILERDIR=${mcdir}
    source ${MAXCOMPILERDIR}/settings.sh
    export MAXELEROSDIR=${MAXCOMPILERDIR}/lib/maxeleros-sim
    export LM_LICENSE_FILE=27000@chicken.doc.ic.ac.uk
    echo "Updated MAXELER tools"
    max-show
    return
  fi
  echo "Could not find maxcompiler version"
  max-show
}

function scratch() {
  cd /mnt/data/scratch/${USER}/workspaces
}

function data() {
  cd /mnt/data/cccad3/${USER}/workspaces
}

# Lists top 10 commands used. Not sure how well this works with ignoredup set...
# http://stackoverflow.com/questions/68372/what-is-your-single-most-favorite-command-line-trick-using-bash
function top-ten() {
  history | awk '{print $2}' | awk 'BEGIN {FS="|"}{print $1}' | sort | uniq -c | sort -nr | head
}

# Mkdir and cd to it
function mkd() {
  d=$1
  mkdir ${d} && cd ${d}
}

# Load, edit, source bashrc quickly
function brc() {
  vim ~/.bashrc
  source ~/.bashrc
}

# CBB to type that every time...
function cmkr() {
  cmake -DCMAKE_BUILD_TYPE=Release ..
}

function cmkd() {
  cmake -DCMAKE_BUILD_TYPE=Debug ..
}

function cmkb() {
  rm -rf build && mkd build && cmkr
}

function cmkcb() {
  .. && cmkb
}

# Commit, and push all changes in current dir
function gpall() {
  msg=$1
  git commit -am "${msg}" && git push
}

function gst() {
  git status
}

function gdi() {
  git diff
}

function gco() {
  git checkout $@
}

function gundo() {
  git reset --soft HEAD~
}

function gamend() {
  git commit --amend -m "$1"
}

function guntracked() {
  git ls-files --others --exclude-standard
}

function pdf_crop() {
  tmp="pdf_cropped_tmp.pdf"
  pdfcrop ${1} ${tmp}
  cp ${tmp} ${1}
}

function force_resolution() {
  # Usage: force_resolution 1920 1080 60
  resolution="$1 $2 $3"
  modeline="$(gtf ${resolution} | tail -n 2 | head -n 1 | sed s/^.*Modeline//g)"
  name=`echo ${modeline} | cut -f 1 -d' ' | sed s/\"//g`
  echo "To add new mode run:"
  echo "    xrandr --newmode $modeline"
  echo "    xrandr --addmode <OUTPUT> ${name}"
  echo "    xrandr --output  <OUTPUT> --mode ${name}"
}

function my_work_setup() {
  centerM=DP1
  leftM=HDMI2
  rightM=eDP1

  xrandr --output ${rightM} --right-of ${centerM}
  xrandr --output ${leftM} --left-of ${centerM}

  # Note: this is obsolete in Ubuntu 14.04 (?)
  setxkbmap us
}


function my_home_setup() {
  setxkbmap gb
  xrandr --auto
}

function pdf4up() {
  pdfjoin --nup 2x2 $@
}

function print_ictmono_landscape() {
  lpr -P ICTMono -o landscape $@
}
  

# [ -f ~/.fzf.bash ] && source ~/.fzf.bash
